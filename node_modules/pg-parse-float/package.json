{
  "name": "pg-parse-float",
  "version": "0.0.1",
  "description": "restore parseFloat behavior to node-postgres (pg) - can be used as a reference for implementing other type parsing addons",
  "main": "index.js",
  "scripts": {
    "test": "node test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/brianc/node-pg-parse-float"
  },
  "keywords": [
    "postgres",
    "float",
    "parsing",
    "type",
    "conversion"
  ],
  "author": {
    "name": "Brian M. Carlson"
  },
  "license": "MIT",
  "devDependencies": {
    "async": "~0.2.7",
    "okay": "~0.2.0",
    "pg": "~1.0.0",
    "mocha": "~1.9.0"
  },
  "readme": "# pg-parse-float\n\nRestore 'parseFloat' functionailty to node-postgres.  Allowing it to return float column types as JavaScript floats.\n\n## install\n\n`npm install pg-parse-float`\n\n## use\n\n```js\nvar pg = require('pg');\nrequire('pg-parse-float')(pg);\n\n//now all your floats (float4, float8, numeric) will come back out\n//as floats in JavaScript\n```\n\n## notes\n\nThis can be used as an example of how to extend or override the built in type parsers for other types as well.\n\nThere were some discussions around this:\n\n- https://github.com/brianc/node-postgres/pull/301\n- https://github.com/brianc/node-postgres/pull/271\n\n\n## license\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "pg-parse-float@0.0.1",
  "dist": {
    "shasum": "05a1dbd00d7e26d20b6a74fbf2b7422eaf79c167",
    "tarball": "http://registry.npmjs.org/pg-parse-float/-/pg-parse-float-0.0.1.tgz"
  },
  "_from": "pg-parse-float@*",
  "_npmVersion": "1.2.17",
  "_npmUser": {
    "name": "brianc",
    "email": "brian.m.carlson@gmail.com"
  },
  "maintainers": [
    {
      "name": "brianc",
      "email": "brian.m.carlson@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "05a1dbd00d7e26d20b6a74fbf2b7422eaf79c167",
  "_resolved": "https://registry.npmjs.org/pg-parse-float/-/pg-parse-float-0.0.1.tgz"
}
